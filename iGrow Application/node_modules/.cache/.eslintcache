[{"/Users/neiljasani/Codebase/iGrow Application/src/index.js":"1","/Users/neiljasani/Codebase/iGrow Application/src/App.js":"2","/Users/neiljasani/Codebase/iGrow Application/src/components/CountriesInfo.js":"3"},{"size":550,"mtime":1665165346337,"results":"4","hashOfConfig":"5"},{"size":1637,"mtime":1665167337978,"results":"6","hashOfConfig":"5"},{"size":5338,"mtime":1665168074773,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"w03o2i",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"/Users/neiljasani/Codebase/iGrow Application/src/index.js",[],[],[],"/Users/neiljasani/Codebase/iGrow Application/src/App.js",["21"],[],"import axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { Link as ReachLink, Route, Routes } from 'react-router-dom';\nimport { ChakraProvider, Input, Link } from '@chakra-ui/react';\nimport CountriesInfo from './components/CountriesInfo'\n\nfunction App() {\n\n  const [findCountry, setFindCountry] = useState(\"\")\n  const [countries, setCountries] = useState([])\n  \n\n  const onFindChange = (event) => {\n    setFindCountry(event.target.value)\n    console.log(event.target.value)\n  }\n  // to show countries after being filtered\n  const countriesToShow = findCountry != \"\" ? countries.filter(c => \n    c.name.common.toLowerCase().includes(findCountry)) : []\n\n  useEffect(() => {\n  const promise = axios.get('https://restcountries.com/v3.1/all')\n  promise\n  .then(response=> {\n      setCountries(response.data)\n    })\n  }, [])\n  // 4bc72c7112c04849fcc7430d52eba260\n\n\n  \n\n\n  console.log(countries)\n  return (\n    <ChakraProvider>\n    <>\n    <nav>\n      <ul>\n        <li><Link as={ReachLink}>Play</Link></li>\n        <li><Link as={ReachLink}>Shop</Link></li>\n        <li><Link as={ReachLink} to='countries'>Countries</Link></li>\n        <li><Link as={ReachLink}>Settings</Link></li>\n        <li><Link as={ReachLink}>Quit</Link></li>\n      </ul>\n    </nav>\n    <Routes>\n      <Route path=\"/countries\" element= {<div>\n      <div>\n        find countries <Input placeholder='Find countries' value={findCountry}\n                              onChange={onFindChange}/>\n      </div>\n      <CountriesInfo array = {countriesToShow}/>\n    </div>}>\n      </Route>\n    </Routes>\n    </>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n",[],"/Users/neiljasani/Codebase/iGrow Application/src/components/CountriesInfo.js",["22","23","24","25","26","27","28","29","30","31","32"],[],"import { useEffect, useState } from 'react';\nimport { Button, ButtonGroup, Heading, Text, List, ListItem } from '@chakra-ui/react'\nimport axios from 'axios';\n\nconst DisplayCountries = (array) => {\n    const languages = array[0].languages\n    console.log(languages)\n    return (\n            <div>\n                <Heading as=\"h2\">{array[0].name.common}</Heading>\n                <div>\n                    capital {array[0].capital[0]}<br></br>\n                    area {array[0].area}\n                </div>\n                <div>\n                    <p><b>languages:</b></p>\n                    <ul>\n                      {Object.keys(languages).map(key => {\n                          return(\n                            <ListItem key={key}>\n                                {languages[key]}\n                            </ListItem>\n                          )\n                      })}\n                    </ul>\n                </div>\n                <div>\n                    <img src={array[0].flags.png}/>\n                </div>\n\n            </div>\n        )\n}\n\nconst DisplayCountry = (country) => {\n    const languages = country.languages\n    console.log(country)\n    const lat = country.latlng[0]\n    const lng = country.latlng[1]\n    const capital = country.capital\n    console.log(\"run\")\n        return (\n            <div>\n                <Heading as=\"h2\">{country.name.common}</Heading>\n                <div>\n                    capital {country.capital}<br></br>\n                    area {country.area}\n                </div>\n                <div>\n                    <p><b>languages:</b></p>\n                    <ul>\n                      {Object.keys(languages).map(key => {\n                          return(\n                            <List spacing={3}>\n                                <ListItem key={key}>\n                                {languages[key]}\n                                </ListItem>\n                            </List>\n                          )\n                      })}\n                    </ul>\n                </div>\n                {/* display Weather by lat lng here */}\n                <div>\n                    <Weather lat= {lat} lng = {lng}/>\n                </div>\n                <div>\n                    <p>\n                        Flag:\n                    </p>\n                </div>\n                <div>\n                    <img src={country.flags.png}/>\n                </div>\n            </div>\n        )\n}\n\n// display weather info for a country using open weather api\nconst Weather = (props) => {\n    const [weather, setWeather] = useState([])\n    \n    const key_api = \"4bc72c7112c04849fcc7430d52eba260\"\n    const lat = props.lat\n    const lng = props.lng\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lng}&appid=${key_api}`\n    useEffect(() => {\n        axios\n        .get(url)\n        .then(response => {\n            setWeather(response.data)\n        })\n    }, [])\n    // wait for data to be fetched\n    console.log(weather)\n    if (weather.length == 0) {\n        return (\n            <div>\n                <p>loading...</p>\n            </div>\n        )\n    }\n    else {\n        return (\n            <div>\n                <h2>Weather in {weather.name}</h2>\n                <div>\n                    <p><b>temperature:</b> {weather.main.temp} Kelvin</p>\n                    <p><b>wind:</b> {weather.wind.speed} m/s</p>\n                    <p><b>humidity</b> {weather.main.humidity}</p>\n                    <p><b>description: </b> {weather.weather[0].main}</p>\n                </div>\n            </div>\n        )\n    }\n}\n// y 1 5 1\n// r 1 0 0\nconst Countries = (props) => {\n    const [countriesWeather, setCountriesWeather] = useState([])\n    var array_cca2 = props.array.map(c => {\n            return c.cca2\n        }\n    )\n    const key_api = \"4bc72c7112c04849fcc7430d52eba260\"\n    console.log(countriesWeather)\n    array_cca2 = array_cca2.reduce((acc, cur)=> (acc[cur]=false, acc), {})\n    \n    var [isShown, setisShown] = useState(array_cca2)\n    \n    function handleClick(e) {\n        const key = e.target.getAttribute(\"data-name\")\n        console.log(e.target.getAttribute(\"data-name\"))\n        var isShownCopy = {...isShown}\n        console.log(\"before element\",isShownCopy[key])\n        console.log(\"before array\", isShownCopy)       \n        setisShown(isShownCopy)\n        \n        isShownCopy[key] = !isShownCopy[key]\n        \n        setisShown(isShownCopy)\n        console.log(\"after element\",isShownCopy[key])\n        console.log(\"after array\", isShownCopy)\n    }\n    if (props.array.length == 1) {\n        return (DisplayCountries(props.array))\n    }\n    else {\n        const countriesToShow = props.array\n        return (\n            <div>\n                {countriesToShow.map(c => {\n                    return(\n                        <div key = {c.cca2}>\n                            {c.name.common}\n                            <Button onClick={handleClick}\n                            data-name={c.cca2}\n                            >show</Button>\n                            {\n                                isShown[c.cca2] ? DisplayCountry(c) : null\n                            }\n\n                        </div>\n                    )\n                })\n                }\n            </div>\n        )\n    }\n}\nexport default Countries",{"ruleId":"33","severity":1,"message":"34","line":18,"column":39,"nodeType":"35","messageId":"36","endLine":18,"endColumn":41},{"ruleId":"37","severity":1,"message":"38","line":2,"column":18,"nodeType":"39","messageId":"40","endLine":2,"endColumn":29},{"ruleId":"37","severity":1,"message":"41","line":2,"column":40,"nodeType":"39","messageId":"40","endLine":2,"endColumn":44},{"ruleId":"42","severity":1,"message":"43","line":28,"column":21,"nodeType":"44","endLine":28,"endColumn":52},{"ruleId":"37","severity":1,"message":"45","line":40,"column":11,"nodeType":"39","messageId":"40","endLine":40,"endColumn":18},{"ruleId":"42","severity":1,"message":"43","line":73,"column":21,"nodeType":"44","endLine":73,"endColumn":51},{"ruleId":"46","severity":1,"message":"47","line":93,"column":8,"nodeType":"48","endLine":93,"endColumn":10,"suggestions":"49"},{"ruleId":"33","severity":1,"message":"50","line":96,"column":24,"nodeType":"35","messageId":"36","endLine":96,"endColumn":26},{"ruleId":"37","severity":1,"message":"51","line":120,"column":30,"nodeType":"39","messageId":"40","endLine":120,"endColumn":49},{"ruleId":"37","severity":1,"message":"52","line":125,"column":11,"nodeType":"39","messageId":"40","endLine":125,"endColumn":18},{"ruleId":"53","severity":1,"message":"54","line":127,"column":64,"nodeType":"55","messageId":"56","endLine":127,"endColumn":65},{"ruleId":"33","severity":1,"message":"50","line":145,"column":28,"nodeType":"35","messageId":"36","endLine":145,"endColumn":30},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-unused-vars","'ButtonGroup' is defined but never used.","Identifier","unusedVar","'Text' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'capital' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["57"],"Expected '===' and instead saw '=='.","'setCountriesWeather' is assigned a value but never used.","'key_api' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression",{"desc":"58","fix":"59"},"Update the dependencies array to be: [url]",{"range":"60","text":"61"},[2949,2951],"[url]"]